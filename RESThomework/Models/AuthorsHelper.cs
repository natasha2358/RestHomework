using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;

namespace RESThomework.Models
{
    public class AuthorsHelper
    {
        public static List<Author> GetAllAuthors()
        {
            List<Author> Authors = new List<Author>();

            using (StreamReader r = new StreamReader(GetFilePath()))
            {
                string json = r.ReadToEnd();
                Authors = JsonConvert.DeserializeObject<List<Author>>(json);
            }

            return Authors;
        }

        public static Author GetById(int id)
        {
            return GetAllAuthors().FirstOrDefault(e => e.UserId==id);
        }
        
        public static List<Article> GetArticlesByAuthor(int userId)
        {
            List<Article> articles = GetById(userId).Articles;
            return articles;

        }

        public static List<Article> GetArticlesWithProps(int userId,string title, string level,string date)
        {
            List<Article> articles = GetById(userId).Articles;
            if (!string.IsNullOrEmpty(title))
            {
                articles= articles.Where(e => e.Title.Contains(title)).ToList();
            }
            if (!string.IsNullOrEmpty(level))
            {
                articles = articles.Where(e => e.Level.Equals(level)).ToList();
            }
            if (!string.IsNullOrEmpty(date))
            {
                articles = articles.Where(e => e.DatePublished.Equals(date)).ToList();
            }
            return articles;

        }


        public static void AddNew(Author Author)
        {
            var filePath = GetFilePath();
            Random random = new Random();
            int rnd = random.Next(0, 50);
            List<Author> Authors = GetAllAuthors();
            
            if(Authors.Any(a => a.UserId == rnd))
            {
                throw new Exception();
            }
        
            using (StreamReader r = new StreamReader(filePath))
            {
                string json = r.ReadToEnd();
                Authors = JsonConvert.DeserializeObject<List<Author>>(json);
                Author.UserId = rnd;
                Authors.Add(Author);
            }
            File.WriteAllText(filePath, JsonConvert.SerializeObject(Authors));
        }

        public static void Update(Author Author)
        {
            var filePath = GetFilePath();
            List<Author> Authors;

            using (StreamReader r = new StreamReader(filePath))
            {
                string json = r.ReadToEnd();
                Authors = JsonConvert.DeserializeObject<List<Author>>(json);
                Authors.Where(e => e.UserId == Author.UserId).Select(x => {
                    x.Name = Author.Name;
                    x.Username = Author.Username;
                    x.Email = Author.Email;
                    return x;
                })
                    .ToList();
            }

            File.WriteAllText(filePath, JsonConvert.SerializeObject(Authors));
        }

        public static void UpdateArticle(int userId, string id, Article article)
        {
            string filePath = GetFilePath();
            var allAuthors = GetAllAuthors();
            var author = GetById(userId);
            var index = allAuthors.FindIndex(a => a.UserId == userId);
            var indexAuthor = author.Articles.FindIndex(a => a.Id.Equals(id));

            Article art = author.Articles[indexAuthor];
            author.Articles.RemoveAt(indexAuthor);

            art.Title = article.Title;
            art.Level = article.Level;

            author.Articles.Add(art);

            if (index != -1)
            {
                allAuthors[index] = author;
            }

            File.WriteAllText(filePath, JsonConvert.SerializeObject(allAuthors));
        }

        public static string generateId()
        {

            StringBuilder str_build = new StringBuilder();
            Random random = new Random();
            char letter;

            for (int i = 0; i < 32; i++)
            {
                double flt = random.NextDouble();
                int shift = Convert.ToInt32(Math.Floor(25 * flt));
                letter = Convert.ToChar(shift + 65);
                str_build.Append(letter);
            }
            str_build.Insert(7, "-");
            str_build.Insert(11, "-");
            str_build.Insert(16, "-");

            return str_build.ToString();
        }

        public static void AddNewArticle(int authorId, Article article)
        {
            var allAuthors = GetAllAuthors();
            var filePath = GetFilePath();
            var selectedAuthor = allAuthors.Where(x => x.UserId.Equals(authorId)).FirstOrDefault();
            var autoGeneratedId = generateId();
            article.Id = autoGeneratedId;
       
            selectedAuthor.Articles.Add(article);
            var index = allAuthors.IndexOf(selectedAuthor);
            if (index != -1)
            {
                allAuthors[index] = selectedAuthor;
            }
            File.WriteAllText(filePath, JsonConvert.SerializeObject(allAuthors));
        }

        public static void Delete(int id)
        {
            var filePath = GetFilePath();
            List<Author> employees;

            using (StreamReader r = new StreamReader(filePath))
            {
                string json = r.ReadToEnd();
                employees = JsonConvert.DeserializeObject<List<Author>>(json);

                var employeeToRemove = employees.Single(e => e.UserId.Equals(id));
                employees.Remove(employeeToRemove);
            }

            File.WriteAllText(filePath, JsonConvert.SerializeObject(employees));
        }

        private static string GetFilePath()
        {
            return Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "Data", "Authors.json");
        }
    
}
}